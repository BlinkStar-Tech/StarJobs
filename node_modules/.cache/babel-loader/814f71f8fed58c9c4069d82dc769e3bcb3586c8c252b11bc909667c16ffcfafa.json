{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BlinkStar\\\\job-board\\\\frontend\\\\src\\\\components\\\\JobList.jsx\",\n  _s = $RefreshSig$();\n// Import necessary dependencies\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\n/**\r\n * JobList component: Fetches and displays a list of job listings.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobList = () => {\n  _s();\n  // Initialize state to store the list of jobs\n  const [jobs, setJobs] = useState([]);\n\n  /**\r\n   * useEffect hook: Fetches the list of jobs when the component mounts.\r\n   */\n  useEffect(() => {\n    // Define an async function to fetch the jobs\n    const fetchJobs = async () => {\n      // Make a GET request to the /api/jobs endpoint\n      const response = await axios.get(\"/api/jobs\");\n      // Update the jobs state with the received data\n      setJobs(response.data);\n    };\n    // Call the fetchJobs function\n    fetchJobs();\n  }, []); // Empty dependency array ensures the effect runs only once\n\n  // Render the job listings\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Job Listings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), jobs.length > 0 ?\n    // Map through the jobs array and render each job\n    jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: job.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: job.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/jobs/${job._id}`,\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)]\n    }, job._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this)) :\n    /*#__PURE__*/\n    // Display a message if no jobs are available\n    _jsxDEV(\"p\", {\n      children: \"No jobs available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n// Export the JobList component\n_s(JobList, \"Q0mbvptFv5mszAZqWDb/1cpBDtw=\");\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","JobList","_s","jobs","setJobs","fetchJobs","response","get","data","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","job","title","description","href","_id","_c","$RefreshReg$"],"sources":["C:/Users/BlinkStar/job-board/frontend/src/components/JobList.jsx"],"sourcesContent":["// Import necessary dependencies\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n/**\r\n * JobList component: Fetches and displays a list of job listings.\r\n */\r\nconst JobList = () => {\r\n  // Initialize state to store the list of jobs\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  /**\r\n   * useEffect hook: Fetches the list of jobs when the component mounts.\r\n   */\r\n  useEffect(() => {\r\n    // Define an async function to fetch the jobs\r\n    const fetchJobs = async () => {\r\n      // Make a GET request to the /api/jobs endpoint\r\n      const response = await axios.get(\"/api/jobs\");\r\n      // Update the jobs state with the received data\r\n      setJobs(response.data);\r\n    };\r\n    // Call the fetchJobs function\r\n    fetchJobs();\r\n  }, []); // Empty dependency array ensures the effect runs only once\r\n\r\n  // Render the job listings\r\n  return (\r\n    <div>\r\n      <h2>Job Listings</h2>\r\n      {jobs.length > 0 ? (\r\n        // Map through the jobs array and render each job\r\n        jobs.map((job) => (\r\n          <div key={job._id}>\r\n            <h3>{job.title}</h3>\r\n            <p>{job.description}</p>\r\n            <a href={`/jobs/${job._id}`}>View Details</a>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        // Display a message if no jobs are available\r\n        <p>No jobs available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export the JobList component\r\nexport default JobList;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAEpC;AACF;AACA;EACED,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B;MACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,WAAW,CAAC;MAC7C;MACAH,OAAO,CAACE,QAAQ,CAACE,IAAI,CAAC;IACxB,CAAC;IACD;IACAH,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEL,OAAA;IAAAS,QAAA,gBACET,OAAA;MAAAS,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACpBV,IAAI,CAACW,MAAM,GAAG,CAAC;IACd;IACAX,IAAI,CAACY,GAAG,CAAEC,GAAG,iBACXhB,OAAA;MAAAS,QAAA,gBACET,OAAA;QAAAS,QAAA,EAAKO,GAAG,CAACC;MAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpBb,OAAA;QAAAS,QAAA,EAAIO,GAAG,CAACE;MAAW;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBb,OAAA;QAAGmB,IAAI,EAAE,SAASH,GAAG,CAACI,GAAG,EAAG;QAAAX,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA,GAHrCG,GAAG,CAACI,GAAG;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIZ,CACN,CAAC;IAAA;IAEF;IACAb,OAAA;MAAAS,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;;AAED;AAAAX,EAAA,CAxCMD,OAAO;AAAAoB,EAAA,GAAPpB,OAAO;AAyCb,eAAeA,OAAO;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}