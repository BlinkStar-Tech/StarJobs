{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BlinkStar\\\\job-board\\\\frontend\\\\src\\\\components\\\\JobDetail.jsx\",\n  _s = $RefreshSig$();\n// Import necessary dependencies from React, axios, and react-router-dom\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useParams } from \"react-router-dom\";\n\n/**\r\n * JobDetail component: Fetches and displays the details of a single job.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JobDetail = () => {\n  _s();\n  // Get the job ID from the URL parameters\n  const {\n    id\n  } = useParams();\n\n  // Initialize state to store the job details\n  const [job, setJob] = useState(null);\n\n  /**\r\n   * useEffect hook: Fetches the job details when the component mounts or the job ID changes.\r\n   */\n  useEffect(() => {\n    // Define an async function to fetch the job details\n    const fetchJob = async () => {\n      // Make a GET request to the /api/jobs endpoint with the job ID\n      const response = await axios.get(`/api/jobs/${id}`);\n      // Update the job state with the received data\n      setJob(response.data);\n    };\n    // Call the fetchJob function\n    fetchJob();\n  }, [id]); // Re-run the effect when the job ID changes\n\n  // Render the job details\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: job ?\n    /*#__PURE__*/\n    // Display the job details if they are available\n    _jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: job.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: job.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => alert(\"Apply for this job\"),\n        children: \"Apply Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) :\n    /*#__PURE__*/\n    // Display a loading message if the job details are not available\n    _jsxDEV(\"p\", {\n      children: \"Loading job details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n// Export the JobDetail component\n_s(JobDetail, \"TYoKThqFYgaaJe3CDB6V8jdAIw0=\", false, function () {\n  return [useParams];\n});\n_c = JobDetail;\nexport default JobDetail;\nvar _c;\n$RefreshReg$(_c, \"JobDetail\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","JobDetail","_s","id","job","setJob","fetchJob","response","get","data","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","onClick","alert","_c","$RefreshReg$"],"sources":["C:/Users/BlinkStar/job-board/frontend/src/components/JobDetail.jsx"],"sourcesContent":["// Import necessary dependencies from React, axios, and react-router-dom\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n/**\r\n * JobDetail component: Fetches and displays the details of a single job.\r\n */\r\nconst JobDetail = () => {\r\n  // Get the job ID from the URL parameters\r\n  const { id } = useParams();\r\n\r\n  // Initialize state to store the job details\r\n  const [job, setJob] = useState(null);\r\n\r\n  /**\r\n   * useEffect hook: Fetches the job details when the component mounts or the job ID changes.\r\n   */\r\n  useEffect(() => {\r\n    // Define an async function to fetch the job details\r\n    const fetchJob = async () => {\r\n      // Make a GET request to the /api/jobs endpoint with the job ID\r\n      const response = await axios.get(`/api/jobs/${id}`);\r\n      // Update the job state with the received data\r\n      setJob(response.data);\r\n    };\r\n    // Call the fetchJob function\r\n    fetchJob();\r\n  }, [id]); // Re-run the effect when the job ID changes\r\n\r\n  // Render the job details\r\n  return (\r\n    <div>\r\n      {job ? (\r\n        // Display the job details if they are available\r\n        <>\r\n          <h2>{job.title}</h2>\r\n          <p>{job.description}</p>\r\n          <button onClick={() => alert(\"Apply for this job\")}>Apply Now</button>\r\n        </>\r\n      ) : (\r\n        // Display a loading message if the job details are not available\r\n        <p>Loading job details...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Export the JobDetail component\r\nexport default JobDetail;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;;AAE5C;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGP,SAAS,CAAC,CAAC;;EAE1B;EACA,MAAM,CAACQ,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAEpC;AACF;AACA;EACED,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B;MACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,aAAaL,EAAE,EAAE,CAAC;MACnD;MACAE,MAAM,CAACE,QAAQ,CAACE,IAAI,CAAC;IACvB,CAAC;IACD;IACAH,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACH,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACA,oBACEL,OAAA;IAAAY,QAAA,EACGN,GAAG;IAAA;IACF;IACAN,OAAA,CAAAE,SAAA;MAAAU,QAAA,gBACEZ,OAAA;QAAAY,QAAA,EAAKN,GAAG,CAACO;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpBjB,OAAA;QAAAY,QAAA,EAAIN,GAAG,CAACY;MAAW;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBjB,OAAA;QAAQmB,OAAO,EAAEA,CAAA,KAAMC,KAAK,CAAC,oBAAoB,CAAE;QAAAR,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,eACtE,CAAC;IAAA;IAEH;IACAjB,OAAA;MAAAY,QAAA,EAAG;IAAsB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EAC7B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;;AAED;AAAAb,EAAA,CAxCMD,SAAS;EAAA,QAEEL,SAAS;AAAA;AAAAuB,EAAA,GAFpBlB,SAAS;AAyCf,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}