{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BlinkStar\\\\job-board\\\\frontend\\\\src\\\\components\\\\JobList.jsx\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n// import Button from \"@mui/material/Button\";\n// import jobImage from \"../images/we-are-hiring-concept-collage.jpg\";\n\n// const JobList = () => {\n//   // Example job data\n//   const jobs = [\n//     {\n//       id: 1,\n//       title: \"Software Engineer\",\n//       company: \"Tech Corp\",\n//       region: \"Remote\",\n//       type: \"Full Time\",\n//     },\n//     {\n//       id: 2,\n//       title: \"Product Manager\",\n//       company: \"Innovate Inc\",\n//       region: \"Bulawayo\",\n//       type: \"Full Time\",\n//     },\n//     {\n//       id: 3,\n//       title: \"Data Analyst\",\n//       company: \"Data Works\",\n//       region: \"Harare\",\n//       type: \"Part Time\",\n//     },\n//   ];\n\n//   return (\n//     <div style={styles.container}>\n//       <div style={styles.jobSection}>\n//         <h2 style={styles.heading}>RECENT JOBS</h2>\n//         <div style={styles.jobList}>\n//           {jobs.map((job) => (\n//             <div key={job.id} style={styles.jobItem}>\n//               <h3 style={styles.jobTitle}>{job.title}</h3>\n//               <p>{job.company}</p>\n//               <p>\n//                 {job.region} - {job.type}\n//               </p>\n//             </div>\n//           ))}\n//           <div>\n//             <Button variant=\"contained\" style={styles.button}>\n//               Get More Jobs\n//             </Button>\n//           </div>\n//         </div>\n//       </div>\n//       <div style={styles.imageSection}>\n//         <img src={jobImage} alt=\"Job Illustration\" style={styles.image} />\n//       </div>\n//     </div>\n//   );\n// };\n\n// const styles = {\n//   container: {\n//     marginTop: \"70px\",\n//     display: \"flex\",\n//     flexDirection: \"row\",\n//     flexWrap: \"wrap\", // Allow wrapping for smaller screens\n//     justifyContent: \"space-between\",\n//     alignItems: \"flex-start\",\n//     padding: \"20px\",\n//     boxSizing: \"border-box\",\n//   },\n//   jobSection: {\n//     flex: 1,\n//     minWidth: \"300px\",\n//     marginRight: \"30px\",\n//   },\n//   heading: {\n//     textAlign: \"left\",\n//     color: \"#205781\",\n//     fontSize: \"24px\",\n//     marginBottom: \"20px\",\n//   },\n//   jobList: {\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     gap: \"15px\", // Adds spacing between job items\n//   },\n//   jobItem: {\n//     border: \"1px solid #ddd\",\n//     backgroundColor: \"rgba(246, 248, 213, 0.42)\",\n//     borderRadius: \"5px\",\n//     padding: \"20px\",\n//     textAlign: \"left\",\n//     width: \"100%\", // Full width for responsiveness\n//     boxSizing: \"border-box\",\n//   },\n//   jobTitle: {\n//     color: \"#4F959D\",\n//     margin: \"0 0 10px 0\",\n//   },\n//   button: {\n//     padding: \"10px\",\n//     backgroundColor: \"#205781\",\n//     marginTop: \"20px\",\n//     width: \"50%\", // Full width for responsiveness\n//   },\n//   imageSection: {\n//     flex: 1,\n//     minWidth: \"300px\",\n//     textAlign: \"center\",\n//   },\n//   image: {\n//     maxWidth: \"70%\",\n//     height: \"auto\",\n//     borderRadius: \"10px\",\n//     marginTop: \"30px\",\n//   },\n//   // Media queries for responsiveness\n//   \"@media (max-width: 768px)\": {\n//     container: {\n//       flexDirection: \"column\",\n//       alignItems: \"center\",\n//     },\n//     jobSection: {\n//       marginRight: \"0\",\n//       marginBottom: \"30px\",\n//     },\n//     image: {\n//       marginTop: \"0\",\n//     },\n//   },\n//   \"@media (max-width: 480px)\": {\n//     heading: {\n//       fontSize: \"20px\",\n//     },\n//     jobItem: {\n//       padding: \"15px\",\n//     },\n//     button: {\n//       padding: \"8px\",\n//     },\n//   },\n// };\n\n// export default JobList;\n\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JobList = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  useEffect(() => {\n    fetchJobs();\n  }, []);\n  const fetchJobs = async () => {\n    try {\n      const response = await fetch(\"/api/jobs\");\n      const data = await response.json();\n      setJobs(data);\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Job List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), jobs.length > 0 ? jobs.map(job => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: job.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: job.company_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: job.location\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"$\", job.salary]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/jobs/${job.id}`,\n        children: \"View Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }, this)]\n    }, job.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No jobs available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(JobList, \"Q0mbvptFv5mszAZqWDb/1cpBDtw=\");\n_c = JobList;\nexport default JobList;\nvar _c;\n$RefreshReg$(_c, \"JobList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","JobList","_s","jobs","setJobs","fetchJobs","response","fetch","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","job","className","title","company_name","location","salary","href","id","_c","$RefreshReg$"],"sources":["C:/Users/BlinkStar/job-board/frontend/src/components/JobList.jsx"],"sourcesContent":["// import React from \"react\";\r\n// import Button from \"@mui/material/Button\";\r\n// import jobImage from \"../images/we-are-hiring-concept-collage.jpg\";\r\n\r\n// const JobList = () => {\r\n//   // Example job data\r\n//   const jobs = [\r\n//     {\r\n//       id: 1,\r\n//       title: \"Software Engineer\",\r\n//       company: \"Tech Corp\",\r\n//       region: \"Remote\",\r\n//       type: \"Full Time\",\r\n//     },\r\n//     {\r\n//       id: 2,\r\n//       title: \"Product Manager\",\r\n//       company: \"Innovate Inc\",\r\n//       region: \"Bulawayo\",\r\n//       type: \"Full Time\",\r\n//     },\r\n//     {\r\n//       id: 3,\r\n//       title: \"Data Analyst\",\r\n//       company: \"Data Works\",\r\n//       region: \"Harare\",\r\n//       type: \"Part Time\",\r\n//     },\r\n//   ];\r\n\r\n//   return (\r\n//     <div style={styles.container}>\r\n//       <div style={styles.jobSection}>\r\n//         <h2 style={styles.heading}>RECENT JOBS</h2>\r\n//         <div style={styles.jobList}>\r\n//           {jobs.map((job) => (\r\n//             <div key={job.id} style={styles.jobItem}>\r\n//               <h3 style={styles.jobTitle}>{job.title}</h3>\r\n//               <p>{job.company}</p>\r\n//               <p>\r\n//                 {job.region} - {job.type}\r\n//               </p>\r\n//             </div>\r\n//           ))}\r\n//           <div>\r\n//             <Button variant=\"contained\" style={styles.button}>\r\n//               Get More Jobs\r\n//             </Button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//       <div style={styles.imageSection}>\r\n//         <img src={jobImage} alt=\"Job Illustration\" style={styles.image} />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// const styles = {\r\n//   container: {\r\n//     marginTop: \"70px\",\r\n//     display: \"flex\",\r\n//     flexDirection: \"row\",\r\n//     flexWrap: \"wrap\", // Allow wrapping for smaller screens\r\n//     justifyContent: \"space-between\",\r\n//     alignItems: \"flex-start\",\r\n//     padding: \"20px\",\r\n//     boxSizing: \"border-box\",\r\n//   },\r\n//   jobSection: {\r\n//     flex: 1,\r\n//     minWidth: \"300px\",\r\n//     marginRight: \"30px\",\r\n//   },\r\n//   heading: {\r\n//     textAlign: \"left\",\r\n//     color: \"#205781\",\r\n//     fontSize: \"24px\",\r\n//     marginBottom: \"20px\",\r\n//   },\r\n//   jobList: {\r\n//     display: \"flex\",\r\n//     flexDirection: \"column\",\r\n//     gap: \"15px\", // Adds spacing between job items\r\n//   },\r\n//   jobItem: {\r\n//     border: \"1px solid #ddd\",\r\n//     backgroundColor: \"rgba(246, 248, 213, 0.42)\",\r\n//     borderRadius: \"5px\",\r\n//     padding: \"20px\",\r\n//     textAlign: \"left\",\r\n//     width: \"100%\", // Full width for responsiveness\r\n//     boxSizing: \"border-box\",\r\n//   },\r\n//   jobTitle: {\r\n//     color: \"#4F959D\",\r\n//     margin: \"0 0 10px 0\",\r\n//   },\r\n//   button: {\r\n//     padding: \"10px\",\r\n//     backgroundColor: \"#205781\",\r\n//     marginTop: \"20px\",\r\n//     width: \"50%\", // Full width for responsiveness\r\n//   },\r\n//   imageSection: {\r\n//     flex: 1,\r\n//     minWidth: \"300px\",\r\n//     textAlign: \"center\",\r\n//   },\r\n//   image: {\r\n//     maxWidth: \"70%\",\r\n//     height: \"auto\",\r\n//     borderRadius: \"10px\",\r\n//     marginTop: \"30px\",\r\n//   },\r\n//   // Media queries for responsiveness\r\n//   \"@media (max-width: 768px)\": {\r\n//     container: {\r\n//       flexDirection: \"column\",\r\n//       alignItems: \"center\",\r\n//     },\r\n//     jobSection: {\r\n//       marginRight: \"0\",\r\n//       marginBottom: \"30px\",\r\n//     },\r\n//     image: {\r\n//       marginTop: \"0\",\r\n//     },\r\n//   },\r\n//   \"@media (max-width: 480px)\": {\r\n//     heading: {\r\n//       fontSize: \"20px\",\r\n//     },\r\n//     jobItem: {\r\n//       padding: \"15px\",\r\n//     },\r\n//     button: {\r\n//       padding: \"8px\",\r\n//     },\r\n//   },\r\n// };\r\n\r\n// export default JobList;\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst JobList = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  const fetchJobs = async () => {\r\n    try {\r\n      const response = await fetch(\"/api/jobs\");\r\n      const data = await response.json();\r\n      setJobs(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching jobs:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Job List</h2>\r\n      {jobs.length > 0 ? (\r\n        jobs.map((job) => (\r\n          <div key={job.id} className=\"job-card\">\r\n            <h3>{job.title}</h3>\r\n            <p>{job.company_name}</p>\r\n            <p>{job.location}</p>\r\n            <p>${job.salary}</p>\r\n            <a href={`/jobs/${job.id}`}>View Details</a>\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <p>No jobs available.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobList;\r\n"],"mappingsnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdQ,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAW,CAAC;MACzC,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClCL,OAAO,CAACI,IAAI,CAAC;IACf,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEV,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChBb,IAAI,CAACc,MAAM,GAAG,CAAC,GACdd,IAAI,CAACe,GAAG,CAAEC,GAAG,iBACXnB,OAAA;MAAkBoB,SAAS,EAAC,UAAU;MAAAR,QAAA,gBACpCZ,OAAA;QAAAY,QAAA,EAAKO,GAAG,CAACE;MAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACpBhB,OAAA;QAAAY,QAAA,EAAIO,GAAG,CAACG;MAAY;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBhB,OAAA;QAAAY,QAAA,EAAIO,GAAG,CAACI;MAAQ;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBhB,OAAA;QAAAY,QAAA,GAAG,GAAC,EAACO,GAAG,CAACK,MAAM;MAAA;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBhB,OAAA;QAAGyB,IAAI,EAAE,SAASN,GAAG,CAACO,EAAE,EAAG;QAAAd,QAAA,EAAC;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA,GALpCG,GAAG,CAACO,EAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMX,CACN,CAAC,gBAEFhB,OAAA;MAAAY,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACzB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACd,EAAA,CAnCID,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AAqCb,eAAeA,OAAO;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}